######################################################################################

BASE_URL = 'http://kissanime.com'
ICON_COVER = "icon-cover.png"

######################################################################################
# Loads metadata from ep_url and returns VideoClipObject 

def MetadataObjectForURL(url):
	
	show_data = HTML.ElementFromURL(url.split("??",1)[0].rsplit('/',1)[0])
	show_title = show_data.xpath("//*[@id='leftside']/div[1]/div[2]/div[2]/a/text()")[0]
	ep_data = HTML.ElementFromURL(url.split("??",1)[0])
	ep_title = ep_data.xpath("//*[@id='divContentVideo']/meta[1]/@content")[0].split((show_title + " "),1)[1]
	show_genres = show_data.xpath("//*[@id='leftside']/div[1]/div[2]/div[2]/p[2]//a/text()")
	show_summary = show_data.xpath("//*[@id='leftside']/div[1]/div[2]/div[2]//p")
	i = len(show_summary) - 1
	show_summary = show_summary[i].xpath(".//text()")
	summary = ""
	for each in show_summary:
		summary = summary + " " + each
	summary = summary.strip()
	up_date = ep_data.xpath("//*[@id='divContentVideo']/meta[4]/@content")[0].split("-",1)[0]
	show_thumb = show_data.xpath("//div[@id='rightside']//img/@src")[0]
			
	return MovieObject(
		title = ep_title,
		genres = show_genres,
		summary = summary,
		year = int(up_date),
		thumb = show_thumb
		)

######################################################################################
# Sets up and sends a request for the video iframe link before passing to PlayVideo

def MediaObjectsForURL(url):

	ep_url = url.split("??",1)[1]
	
	if ep_url.find("itag=37") > 0:
		resolution = 1080 

	elif ep_url.find("itag=22") > 0:
		resolution = 720 

	else:
		resolution = 360 

	return[
		MediaObject(
			optimized_for_streaming = True,
			container = Container.MP4,
			audio_channels = 2,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			video_resolution = resolution,
			parts = [PartObject(key=Callback(PlayVideo, url = ep_url))]
			)
		]
		
def PlayVideo(url):
	
	return Redirect(url)
